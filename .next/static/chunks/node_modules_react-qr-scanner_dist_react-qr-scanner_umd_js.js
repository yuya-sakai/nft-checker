/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_react-qr-scanner_dist_react-qr-scanner_umd_js"],{

/***/ "./node_modules/react-qr-scanner/dist/react-qr-scanner.umd.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-qr-scanner/dist/react-qr-scanner.umd.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! react */ \"./node_modules/react/index.js\")) :\n  0;\n})(this, (function (React) { 'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () { return e[k]; }\n          });\n        }\n      });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n  function _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n\n    var _s, _e;\n\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  var propTypes = {exports: {}};\n\n  var reactIs = {exports: {}};\n\n  var reactIs_production_min = {};\n\n  /** @license React v16.13.1\n   * react-is.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\n  Symbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\n  function z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;\n  reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return \"object\"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};\n  reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};\n  reactIs_production_min.isValidElementType=function(a){return \"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;\n\n  var reactIs_development = {};\n\n  /** @license React v16.13.1\n   * react-is.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n\n\n  if (true) {\n    (function() {\n\n  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n  // nor polyfill, then a plain number is used for performance.\n  var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n  // (unstable) APIs that have been removed. Can we remove the symbols?\n\n  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\n  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\n  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\n  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\n  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\n  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\n  function isValidElementType(type) {\n    return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n  }\n\n  function typeOf(object) {\n    if (typeof object === 'object' && object !== null) {\n      var $$typeof = object.$$typeof;\n\n      switch ($$typeof) {\n        case REACT_ELEMENT_TYPE:\n          var type = object.type;\n\n          switch (type) {\n            case REACT_ASYNC_MODE_TYPE:\n            case REACT_CONCURRENT_MODE_TYPE:\n            case REACT_FRAGMENT_TYPE:\n            case REACT_PROFILER_TYPE:\n            case REACT_STRICT_MODE_TYPE:\n            case REACT_SUSPENSE_TYPE:\n              return type;\n\n            default:\n              var $$typeofType = type && type.$$typeof;\n\n              switch ($$typeofType) {\n                case REACT_CONTEXT_TYPE:\n                case REACT_FORWARD_REF_TYPE:\n                case REACT_LAZY_TYPE:\n                case REACT_MEMO_TYPE:\n                case REACT_PROVIDER_TYPE:\n                  return $$typeofType;\n\n                default:\n                  return $$typeof;\n              }\n\n          }\n\n        case REACT_PORTAL_TYPE:\n          return $$typeof;\n      }\n    }\n\n    return undefined;\n  } // AsyncMode is deprecated along with isAsyncMode\n\n  var AsyncMode = REACT_ASYNC_MODE_TYPE;\n  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n  var ContextConsumer = REACT_CONTEXT_TYPE;\n  var ContextProvider = REACT_PROVIDER_TYPE;\n  var Element = REACT_ELEMENT_TYPE;\n  var ForwardRef = REACT_FORWARD_REF_TYPE;\n  var Fragment = REACT_FRAGMENT_TYPE;\n  var Lazy = REACT_LAZY_TYPE;\n  var Memo = REACT_MEMO_TYPE;\n  var Portal = REACT_PORTAL_TYPE;\n  var Profiler = REACT_PROFILER_TYPE;\n  var StrictMode = REACT_STRICT_MODE_TYPE;\n  var Suspense = REACT_SUSPENSE_TYPE;\n  var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\n  function isAsyncMode(object) {\n    {\n      if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n        hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n        console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n      }\n    }\n\n    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n  }\n  function isConcurrentMode(object) {\n    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n  }\n  function isContextConsumer(object) {\n    return typeOf(object) === REACT_CONTEXT_TYPE;\n  }\n  function isContextProvider(object) {\n    return typeOf(object) === REACT_PROVIDER_TYPE;\n  }\n  function isElement(object) {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n  function isForwardRef(object) {\n    return typeOf(object) === REACT_FORWARD_REF_TYPE;\n  }\n  function isFragment(object) {\n    return typeOf(object) === REACT_FRAGMENT_TYPE;\n  }\n  function isLazy(object) {\n    return typeOf(object) === REACT_LAZY_TYPE;\n  }\n  function isMemo(object) {\n    return typeOf(object) === REACT_MEMO_TYPE;\n  }\n  function isPortal(object) {\n    return typeOf(object) === REACT_PORTAL_TYPE;\n  }\n  function isProfiler(object) {\n    return typeOf(object) === REACT_PROFILER_TYPE;\n  }\n  function isStrictMode(object) {\n    return typeOf(object) === REACT_STRICT_MODE_TYPE;\n  }\n  function isSuspense(object) {\n    return typeOf(object) === REACT_SUSPENSE_TYPE;\n  }\n\n  reactIs_development.AsyncMode = AsyncMode;\n  reactIs_development.ConcurrentMode = ConcurrentMode;\n  reactIs_development.ContextConsumer = ContextConsumer;\n  reactIs_development.ContextProvider = ContextProvider;\n  reactIs_development.Element = Element;\n  reactIs_development.ForwardRef = ForwardRef;\n  reactIs_development.Fragment = Fragment;\n  reactIs_development.Lazy = Lazy;\n  reactIs_development.Memo = Memo;\n  reactIs_development.Portal = Portal;\n  reactIs_development.Profiler = Profiler;\n  reactIs_development.StrictMode = StrictMode;\n  reactIs_development.Suspense = Suspense;\n  reactIs_development.isAsyncMode = isAsyncMode;\n  reactIs_development.isConcurrentMode = isConcurrentMode;\n  reactIs_development.isContextConsumer = isContextConsumer;\n  reactIs_development.isContextProvider = isContextProvider;\n  reactIs_development.isElement = isElement;\n  reactIs_development.isForwardRef = isForwardRef;\n  reactIs_development.isFragment = isFragment;\n  reactIs_development.isLazy = isLazy;\n  reactIs_development.isMemo = isMemo;\n  reactIs_development.isPortal = isPortal;\n  reactIs_development.isProfiler = isProfiler;\n  reactIs_development.isStrictMode = isStrictMode;\n  reactIs_development.isSuspense = isSuspense;\n  reactIs_development.isValidElementType = isValidElementType;\n  reactIs_development.typeOf = typeOf;\n    })();\n  }\n\n  if (false) {} else {\n    reactIs.exports = reactIs_development;\n  }\n\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n  /* eslint-disable no-unused-vars */\n  var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n  function toObject(val) {\n  \tif (val === null || val === undefined) {\n  \t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n  \t}\n\n  \treturn Object(val);\n  }\n\n  function shouldUseNative() {\n  \ttry {\n  \t\tif (!Object.assign) {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// Detect buggy property enumeration order in older V8 versions.\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n  \t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n  \t\ttest1[5] = 'de';\n  \t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\tvar test2 = {};\n  \t\tfor (var i = 0; i < 10; i++) {\n  \t\t\ttest2['_' + String.fromCharCode(i)] = i;\n  \t\t}\n  \t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n  \t\t\treturn test2[n];\n  \t\t});\n  \t\tif (order2.join('') !== '0123456789') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\tvar test3 = {};\n  \t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n  \t\t\ttest3[letter] = letter;\n  \t\t});\n  \t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n  \t\t\t\t'abcdefghijklmnopqrst') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\treturn true;\n  \t} catch (err) {\n  \t\t// We don't expect any of the above to throw, but better to be safe.\n  \t\treturn false;\n  \t}\n  }\n\n  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  \tvar from;\n  \tvar to = toObject(target);\n  \tvar symbols;\n\n  \tfor (var s = 1; s < arguments.length; s++) {\n  \t\tfrom = Object(arguments[s]);\n\n  \t\tfor (var key in from) {\n  \t\t\tif (hasOwnProperty.call(from, key)) {\n  \t\t\t\tto[key] = from[key];\n  \t\t\t}\n  \t\t}\n\n  \t\tif (getOwnPropertySymbols) {\n  \t\t\tsymbols = getOwnPropertySymbols(from);\n  \t\t\tfor (var i = 0; i < symbols.length; i++) {\n  \t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n  \t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n\n  \treturn to;\n  };\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\n  var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;\n\n  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var printWarning$1 = function() {};\n\n  if (true) {\n    var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;\n    var loggedTypeFailures = {};\n    var has$1 = has$2;\n\n    printWarning$1 = function(text) {\n      var message = 'Warning: ' + text;\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) { /**/ }\n    };\n  }\n\n  /**\n   * Assert that the values match with the type specs.\n   * Error messages are memorized and will only be shown once.\n   *\n   * @param {object} typeSpecs Map of name to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @param {string} componentName Name of the component for error messages.\n   * @param {?Function} getStack Returns the component stack.\n   * @private\n   */\n  function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {\n    if (true) {\n      for (var typeSpecName in typeSpecs) {\n        if (has$1(typeSpecs, typeSpecName)) {\n          var error;\n          // Prop type validation may throw. In case they do, we don't want to\n          // fail the render phase where it didn't fail before. So we log it.\n          // After these have been cleaned up, we'll let them throw.\n          try {\n            // This is intentionally an invariant that gets caught. It's the same\n            // behavior as without this statement except with a better message.\n            if (typeof typeSpecs[typeSpecName] !== 'function') {\n              var err = Error(\n                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'\n              );\n              err.name = 'Invariant Violation';\n              throw err;\n            }\n            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);\n          } catch (ex) {\n            error = ex;\n          }\n          if (error && !(error instanceof Error)) {\n            printWarning$1(\n              (componentName || 'React class') + ': type specification of ' +\n              location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).'\n            );\n          }\n          if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n            // Only monitor this failure once because there tends to be a lot of the\n            // same error.\n            loggedTypeFailures[error.message] = true;\n\n            var stack = getStack ? getStack() : '';\n\n            printWarning$1(\n              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets warning cache when testing.\n   *\n   * @private\n   */\n  checkPropTypes$1.resetWarningCache = function() {\n    if (true) {\n      loggedTypeFailures = {};\n    }\n  };\n\n  var checkPropTypes_1 = checkPropTypes$1;\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactIs$1 = reactIs.exports;\n  var assign = objectAssign;\n\n  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n  var has = has$2;\n  var checkPropTypes = checkPropTypes_1;\n\n  var printWarning = function() {};\n\n  if (true) {\n    printWarning = function(text) {\n      var message = 'Warning: ' + text;\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n  }\n\n  function emptyFunctionThatReturnsNull() {\n    return null;\n  }\n\n  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n    /* global Symbol */\n    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n    /**\n     * Returns the iterator method function contained on the iterable object.\n     *\n     * Be sure to invoke the function with the iterable as context:\n     *\n     *     var iteratorFn = getIteratorFn(myIterable);\n     *     if (iteratorFn) {\n     *       var iterator = iteratorFn.call(myIterable);\n     *       ...\n     *     }\n     *\n     * @param {?object} maybeIterable\n     * @return {?function}\n     */\n    function getIteratorFn(maybeIterable) {\n      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n      if (typeof iteratorFn === 'function') {\n        return iteratorFn;\n      }\n    }\n\n    /**\n     * Collection of methods that allow declaration and validation of props that are\n     * supplied to React components. Example usage:\n     *\n     *   var Props = require('ReactPropTypes');\n     *   var MyArticle = React.createClass({\n     *     propTypes: {\n     *       // An optional string prop named \"description\".\n     *       description: Props.string,\n     *\n     *       // A required enum prop named \"category\".\n     *       category: Props.oneOf(['News','Photos']).isRequired,\n     *\n     *       // A prop named \"dialog\" that requires an instance of Dialog.\n     *       dialog: Props.instanceOf(Dialog).isRequired\n     *     },\n     *     render: function() { ... }\n     *   });\n     *\n     * A more formal specification of how these methods are used:\n     *\n     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n     *   decl := ReactPropTypes.{type}(.isRequired)?\n     *\n     * Each and every declaration produces a function with the same signature. This\n     * allows the creation of custom validation functions. For example:\n     *\n     *  var MyLink = React.createClass({\n     *    propTypes: {\n     *      // An optional string or URI prop named \"href\".\n     *      href: function(props, propName, componentName) {\n     *        var propValue = props[propName];\n     *        if (propValue != null && typeof propValue !== 'string' &&\n     *            !(propValue instanceof URI)) {\n     *          return new Error(\n     *            'Expected a string or an URI for ' + propName + ' in ' +\n     *            componentName\n     *          );\n     *        }\n     *      }\n     *    },\n     *    render: function() {...}\n     *  });\n     *\n     * @internal\n     */\n\n    var ANONYMOUS = '<<anonymous>>';\n\n    // Important!\n    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n    var ReactPropTypes = {\n      array: createPrimitiveTypeChecker('array'),\n      bigint: createPrimitiveTypeChecker('bigint'),\n      bool: createPrimitiveTypeChecker('boolean'),\n      func: createPrimitiveTypeChecker('function'),\n      number: createPrimitiveTypeChecker('number'),\n      object: createPrimitiveTypeChecker('object'),\n      string: createPrimitiveTypeChecker('string'),\n      symbol: createPrimitiveTypeChecker('symbol'),\n\n      any: createAnyTypeChecker(),\n      arrayOf: createArrayOfTypeChecker,\n      element: createElementTypeChecker(),\n      elementType: createElementTypeTypeChecker(),\n      instanceOf: createInstanceTypeChecker,\n      node: createNodeChecker(),\n      objectOf: createObjectOfTypeChecker,\n      oneOf: createEnumTypeChecker,\n      oneOfType: createUnionTypeChecker,\n      shape: createShapeTypeChecker,\n      exact: createStrictShapeTypeChecker,\n    };\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    /*eslint-disable no-self-compare*/\n    function is(x, y) {\n      // SameValue algorithm\n      if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n      } else {\n        // Step 6.a: NaN == NaN\n        return x !== x && y !== y;\n      }\n    }\n    /*eslint-enable no-self-compare*/\n\n    /**\n     * We use an Error-like object for backward compatibility as people may call\n     * PropTypes directly and inspect their output. However, we don't use real\n     * Errors anymore. We don't inspect their stack anyway, and creating them\n     * is prohibitively expensive if they are created too often, such as what\n     * happens in oneOfType() for any type before the one that matched.\n     */\n    function PropTypeError(message, data) {\n      this.message = message;\n      this.data = data && typeof data === 'object' ? data: {};\n      this.stack = '';\n    }\n    // Make `instanceof Error` still work for returned errors.\n    PropTypeError.prototype = Error.prototype;\n\n    function createChainableTypeChecker(validate) {\n      if (true) {\n        var manualPropTypeCallCache = {};\n        var manualPropTypeWarningCount = 0;\n      }\n      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n        componentName = componentName || ANONYMOUS;\n        propFullName = propFullName || propName;\n\n        if (secret !== ReactPropTypesSecret$1) {\n          if (throwOnDirectAccess) {\n            // New behavior only for users of `prop-types` package\n            var err = new Error(\n              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n              'Use `PropTypes.checkPropTypes()` to call them. ' +\n              'Read more at http://fb.me/use-check-prop-types'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          } else if ( true && typeof console !== 'undefined') {\n            // Old behavior for people using React.PropTypes\n            var cacheKey = componentName + ':' + propName;\n            if (\n              !manualPropTypeCallCache[cacheKey] &&\n              // Avoid spamming the console because they are often not actionable except for lib authors\n              manualPropTypeWarningCount < 3\n            ) {\n              printWarning(\n                'You are manually calling a React.PropTypes validation ' +\n                'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +\n                'and will throw in the standalone `prop-types` package. ' +\n                'You may be seeing this warning due to a third-party PropTypes ' +\n                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n              );\n              manualPropTypeCallCache[cacheKey] = true;\n              manualPropTypeWarningCount++;\n            }\n          }\n        }\n        if (props[propName] == null) {\n          if (isRequired) {\n            if (props[propName] === null) {\n              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n            }\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n          }\n          return null;\n        } else {\n          return validate(props, propName, componentName, location, propFullName);\n        }\n      }\n\n      var chainedCheckType = checkType.bind(null, false);\n      chainedCheckType.isRequired = checkType.bind(null, true);\n\n      return chainedCheckType;\n    }\n\n    function createPrimitiveTypeChecker(expectedType) {\n      function validate(props, propName, componentName, location, propFullName, secret) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== expectedType) {\n          // `propValue` being instance of, say, date/regexp, pass the 'object'\n          // check, but we can offer a more precise error message here rather than\n          // 'of type `object`'.\n          var preciseType = getPreciseType(propValue);\n\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),\n            {expectedType: expectedType}\n          );\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createAnyTypeChecker() {\n      return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n    }\n\n    function createArrayOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n        }\n        var propValue = props[propName];\n        if (!Array.isArray(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n        }\n        for (var i = 0; i < propValue.length; i++) {\n          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createElementTypeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        if (!isValidElement(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createElementTypeTypeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        if (!ReactIs$1.isValidElementType(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createInstanceTypeChecker(expectedClass) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!(props[propName] instanceof expectedClass)) {\n          var expectedClassName = expectedClass.name || ANONYMOUS;\n          var actualClassName = getClassName(props[propName]);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createEnumTypeChecker(expectedValues) {\n      if (!Array.isArray(expectedValues)) {\n        if (true) {\n          if (arguments.length > 1) {\n            printWarning(\n              'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n              'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n            );\n          } else {\n            printWarning('Invalid argument supplied to oneOf, expected an array.');\n          }\n        }\n        return emptyFunctionThatReturnsNull;\n      }\n\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        for (var i = 0; i < expectedValues.length; i++) {\n          if (is(propValue, expectedValues[i])) {\n            return null;\n          }\n        }\n\n        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n          var type = getPreciseType(value);\n          if (type === 'symbol') {\n            return String(value);\n          }\n          return value;\n        });\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createObjectOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n        }\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n        }\n        for (var key in propValue) {\n          if (has(propValue, key)) {\n            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n            if (error instanceof Error) {\n              return error;\n            }\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createUnionTypeChecker(arrayOfTypeCheckers) {\n      if (!Array.isArray(arrayOfTypeCheckers)) {\n         true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;\n        return emptyFunctionThatReturnsNull;\n      }\n\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (typeof checker !== 'function') {\n          printWarning(\n            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n          );\n          return emptyFunctionThatReturnsNull;\n        }\n      }\n\n      function validate(props, propName, componentName, location, propFullName) {\n        var expectedTypes = [];\n        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n          var checker = arrayOfTypeCheckers[i];\n          var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1);\n          if (checkerResult == null) {\n            return null;\n          }\n          if (checkerResult.data && has(checkerResult.data, 'expectedType')) {\n            expectedTypes.push(checkerResult.data.expectedType);\n          }\n        }\n        var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createNodeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!isNode(props[propName])) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function invalidValidatorError(componentName, location, propFullName, key, type) {\n      return new PropTypeError(\n        (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +\n        'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'\n      );\n    }\n\n    function createShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        for (var key in shapeTypes) {\n          var checker = shapeTypes[key];\n          if (typeof checker !== 'function') {\n            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createStrictShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        // We need to check all keys in case some are required but missing from props.\n        var allKeys = assign({}, props[propName], shapeTypes);\n        for (var key in allKeys) {\n          var checker = shapeTypes[key];\n          if (has(shapeTypes, key) && typeof checker !== 'function') {\n            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n          }\n          if (!checker) {\n            return new PropTypeError(\n              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n              '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n              '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')\n            );\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n\n      return createChainableTypeChecker(validate);\n    }\n\n    function isNode(propValue) {\n      switch (typeof propValue) {\n        case 'number':\n        case 'string':\n        case 'undefined':\n          return true;\n        case 'boolean':\n          return !propValue;\n        case 'object':\n          if (Array.isArray(propValue)) {\n            return propValue.every(isNode);\n          }\n          if (propValue === null || isValidElement(propValue)) {\n            return true;\n          }\n\n          var iteratorFn = getIteratorFn(propValue);\n          if (iteratorFn) {\n            var iterator = iteratorFn.call(propValue);\n            var step;\n            if (iteratorFn !== propValue.entries) {\n              while (!(step = iterator.next()).done) {\n                if (!isNode(step.value)) {\n                  return false;\n                }\n              }\n            } else {\n              // Iterator will provide entry [k,v] tuples rather than values.\n              while (!(step = iterator.next()).done) {\n                var entry = step.value;\n                if (entry) {\n                  if (!isNode(entry[1])) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } else {\n            return false;\n          }\n\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    function isSymbol(propType, propValue) {\n      // Native Symbol.\n      if (propType === 'symbol') {\n        return true;\n      }\n\n      // falsy value can't be a Symbol\n      if (!propValue) {\n        return false;\n      }\n\n      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n      if (propValue['@@toStringTag'] === 'Symbol') {\n        return true;\n      }\n\n      // Fallback for non-spec compliant Symbols which are polyfilled.\n      if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n        return true;\n      }\n\n      return false;\n    }\n\n    // Equivalent of `typeof` but with special handling for array and regexp.\n    function getPropType(propValue) {\n      var propType = typeof propValue;\n      if (Array.isArray(propValue)) {\n        return 'array';\n      }\n      if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return 'object';\n      }\n      if (isSymbol(propType, propValue)) {\n        return 'symbol';\n      }\n      return propType;\n    }\n\n    // This handles more types than `getPropType`. Only used for error messages.\n    // See `createPrimitiveTypeChecker`.\n    function getPreciseType(propValue) {\n      if (typeof propValue === 'undefined' || propValue === null) {\n        return '' + propValue;\n      }\n      var propType = getPropType(propValue);\n      if (propType === 'object') {\n        if (propValue instanceof Date) {\n          return 'date';\n        } else if (propValue instanceof RegExp) {\n          return 'regexp';\n        }\n      }\n      return propType;\n    }\n\n    // Returns a string that is postfixed to a warning about an invalid type.\n    // For example, \"undefined\" or \"of type array\"\n    function getPostfixForTypeWarning(value) {\n      var type = getPreciseType(value);\n      switch (type) {\n        case 'array':\n        case 'object':\n          return 'an ' + type;\n        case 'boolean':\n        case 'date':\n        case 'regexp':\n          return 'a ' + type;\n        default:\n          return type;\n      }\n    }\n\n    // Returns class name of the object, if any.\n    function getClassName(propValue) {\n      if (!propValue.constructor || !propValue.constructor.name) {\n        return ANONYMOUS;\n      }\n      return propValue.constructor.name;\n    }\n\n    ReactPropTypes.checkPropTypes = checkPropTypes;\n    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    return ReactPropTypes;\n  };\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret = ReactPropTypesSecret_1;\n\n  function emptyFunction() {}\n  function emptyFunctionWithReset() {}\n  emptyFunctionWithReset.resetWarningCache = emptyFunction;\n\n  var factoryWithThrowingShims = function() {\n    function shim(props, propName, componentName, location, propFullName, secret) {\n      if (secret === ReactPropTypesSecret) {\n        // It is still safe when called from React.\n        return;\n      }\n      var err = new Error(\n        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n        'Use PropTypes.checkPropTypes() to call them. ' +\n        'Read more at http://fb.me/use-check-prop-types'\n      );\n      err.name = 'Invariant Violation';\n      throw err;\n    }  shim.isRequired = shim;\n    function getShim() {\n      return shim;\n    }  // Important!\n    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n    var ReactPropTypes = {\n      array: shim,\n      bigint: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n\n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      elementType: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim,\n\n      checkPropTypes: emptyFunctionWithReset,\n      resetWarningCache: emptyFunction\n    };\n\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    return ReactPropTypes;\n  };\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  if (true) {\n    var ReactIs = reactIs.exports;\n\n    // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n    var throwOnDirectAccess = true;\n    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);\n  } else {}\n\n  var PropTypes = propTypes.exports;\n\n  function decodeBase64(base64, enableUnicode) {\n      var binaryString = atob(base64);\n      if (enableUnicode) {\n          var binaryView = new Uint8Array(binaryString.length);\n          for (var i = 0, n = binaryString.length; i < n; ++i) {\n              binaryView[i] = binaryString.charCodeAt(i);\n          }\n          return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));\n      }\n      return binaryString;\n  }\n\n  function createURL(base64, sourcemapArg, enableUnicodeArg) {\n      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;\n      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;\n      var source = decodeBase64(base64, enableUnicode);\n      var start = source.indexOf('\\n', 10) + 1;\n      var body = source.substring(start) + (sourcemap ? '\\/\\/# sourceMappingURL=' + sourcemap : '');\n      var blob = new Blob([body], { type: 'application/javascript' });\n      return URL.createObjectURL(blob);\n  }\n\n  function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {\n      var url;\n      return function WorkerFactory(options) {\n          url = url || createURL(base64, sourcemapArg, enableUnicodeArg);\n          return new Worker(url, options);\n      };\n  }\n\n  var WorkerFactory = createBase64WorkerFactory('', null, false);\n  /* eslint-enable */\n\n  var _excluded = [\"constraints\", \"onError\", \"onLoad\", \"onScan\", \"resolution\", \"qrArea\"];\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n  var createWorker = function createWorker() {\n    return new WorkerFactory();\n  };\n\n  var stopMediaStream = function stopMediaStream(stream) {\n    if (stream) {\n      if (stream.getVideoTracks && stream.getAudioTracks) {\n        stream.getVideoTracks().forEach(function (track) {\n          stream.removeTrack(track);\n          track.stop();\n        });\n        stream.getAudioTracks().forEach(function (track) {\n          stream.removeTrack(track);\n          track.stop();\n        });\n      } else {\n        stream.stop();\n      }\n    }\n  };\n\n  var Reader = function Reader(props) {\n    var constraints = props.constraints,\n        onError = props.onError,\n        onLoad = props.onLoad,\n        onScan = props.onScan,\n        resolution = props.resolution,\n        qrArea = props.qrArea,\n        other = _objectWithoutProperties(props, _excluded);\n\n    var streamRef = React__namespace.useRef(null);\n    var videoEl = React__namespace.useRef(null);\n    var canvasEl = React__namespace.useRef(document.createElement(\"canvas\"));\n    var ctxRef = React__namespace.useRef(null);\n    var requestRef = React__namespace.useRef();\n\n    var _React$useState = React__namespace.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        src = _React$useState2[0],\n        setSrc = _React$useState2[1];\n\n    var isProcessingRef = React__namespace.useRef(false);\n    var workerRef = React__namespace.useRef();\n    React__namespace.useEffect(function () {\n      workerRef.current = createWorker();\n      var worker = workerRef.current;\n\n      worker.onmessage = function (e) {\n        if (onScan) onScan(e.data ? _objectSpread(_objectSpread({}, e.data), {}, {\n          canvas: canvasEl.current\n        }) : null);\n        isProcessingRef.current = false;\n      };\n\n      return function () {\n        worker.terminate();\n      };\n    }, [onScan]);\n    var qrAreaStr = JSON.stringify(qrArea);\n    var check = React__namespace.useCallback(function () {\n      var qrArea = JSON.parse(qrAreaStr);\n      var worker = workerRef.current;\n      var videoIsPlaying = videoEl.current && videoEl.current.readyState === videoEl.current.HAVE_ENOUGH_DATA;\n\n      if (!isProcessingRef.current && videoIsPlaying) {\n        isProcessingRef.current = true; // Get image/video dimensions\n\n        var width = videoEl.current.videoWidth;\n        var height = videoEl.current.videoHeight;\n        var greatestSize = width > height ? width : height;\n        var ratio = Math.floor(resolution / greatestSize * 100) / 100;\n        height = Math.floor(ratio * height);\n        width = Math.floor(ratio * width);\n        canvasEl.current.width = width;\n        canvasEl.current.height = height;\n        ctxRef.current = canvasEl.current.getContext(\"2d\");\n        ctxRef.current.drawImage(videoEl.current, 0, 0, width, height);\n        var imageData;\n\n        if (qrArea && qrArea.length === 2 && qrArea[0] > 0 && qrArea[1] > 0) {\n          imageData = ctxRef.current.getImageData(Math.floor((width - qrArea[0]) / 2), Math.floor((height - qrArea[1]) / 2), qrArea[0], qrArea[1]);\n        } else {\n          imageData = ctxRef.current.getImageData(0, 0, width, height);\n        } // Send data to web-worker\n\n\n        worker.postMessage(imageData);\n      }\n\n      requestRef.current = requestAnimationFrame(check);\n    }, [resolution, qrAreaStr]);\n    var constraintsStr = JSON.stringify(constraints);\n    React__namespace.useEffect(function () {\n      var constraints = JSON.parse(constraintsStr);\n      var isSubscribed = true;\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        if (!isSubscribed) {\n          stopMediaStream(stream);\n        } else {\n          streamRef.current = stream;\n\n          try {\n            if (videoEl.current) {\n              videoEl.current.srcObject = stream;\n              videoEl.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n            }\n          } catch (error) {\n            setSrc(window.URL.createObjectURL(stream));\n          }\n\n          if (onLoad) onLoad();\n          requestRef.current = requestAnimationFrame(check);\n        }\n      })[\"catch\"](function (error) {\n        return isSubscribed ? onError(error) : null;\n      });\n      return function () {\n        cancelAnimationFrame(requestRef.current);\n        isSubscribed = false;\n        stopMediaStream(streamRef.current);\n\n        if (src) {\n          window.URL.revokeObjectURL(src);\n        }\n      };\n    }, [check, constraintsStr, onError, onLoad, src]);\n    return /*#__PURE__*/React__namespace.createElement(\"video\", _extends({\n      autoPlay: true,\n      playsInline: true,\n      src: src,\n      ref: videoEl\n    }, other));\n  };\n\n  Reader.propTypes = {\n    constraints: PropTypes.object,\n    onError: PropTypes.func.isRequired,\n    onLoad: PropTypes.func,\n    onScan: PropTypes.func.isRequired,\n    resolution: PropTypes.number,\n    qrArea: PropTypes.array\n  };\n  Reader.defaultProps = {\n    constraints: {\n      audio: false,\n      video: true\n    },\n    resolution: 640,\n    qrArea: []\n  };\n\n  return Reader;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-qr-scanner/dist/react-qr-scanner.umd.js\n"));

/***/ })

}]);